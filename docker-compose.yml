version: "3.3"

# Определяем все сервисы которые будут задействованы в нашем проекте
services:
  # Первый сервис называется `flaskapp` - это наше python приложение
  flaskapp:
    # Инструкция build указывает что мы будем использовать для этого сервиса docker образ
    # который будет построен на основе Dockerfile, расположенного в текущей папке
    build: .
    # Построенный образ будет иметь имя flask-todo (таким образом он будет отображаться
    # в выводе команды `docker image ls`, которая выводит список всех docker образов
    # на локальной машине)
    image: flask-todo
    # Мы монтируем текущую папку проекта прямо внутрь docker контейнера для того, чтобы
    # любые изменения в файлах нашего приложения мнговенно оказывались внутри контейнера
    volumes:
      - .:/app
    # Поскольку flask-приложения по-умолчанию работают на порту 5000 - мы пробрасываем этот порт
    # из контейнера на локальную машину так, чтобы при отправке HTTP запроса на http://localhost:5000
    # он автоматически перенаправлялся бы в наш docker-контейнер
    ports:
      - 5000:5000
    # Тут определяются переменные окружения которые будут доступны внутри контейнера
    environment:
      - FLASK_ENV=development
      - MONGO_HOST=mongo
      - MONGO_PORT=27017
    # Эта инструкция означает что перед инициализацией текущего сервиса необходимо инициализировать
    # сервис mongo
    depends_on:
      - mongo
  # Сервис предоставляющий нашему flask приложению MongoDB инстанс
  mongo:
    # Сервис работает на основе официального docker образа mongo, который будет скачан с dockerhub.io
    # при первичной инициализации данной конфигурации через `docker-compose`
    image: mongo
    # По-умолчанию MongoDB работает на порту 27017 - мы также пробрасываем его на локальную машину
    # на случай если понадобится подключиться к MongoDB с нашей машины с помощью какой-либо
    # клиентской утилиты
    ports:
      - 27017:27017
